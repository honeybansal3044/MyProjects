<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

	<bean id="triangle_preem" class="com.edu.spring.Triangle_DepInject_Preemptive">
		<!-- <property name="type" value="abhishek"></property> -->
		<constructor-arg index="0" type="String" value="hello"></constructor-arg>
		<constructor-arg index="1" type="int" value="20"></constructor-arg>
	</bean>
	
	<!-- Inner Bean Example. Here pointb is inner bean of triangle class.
			 We define those classes here which we know will be used with in Triangle 
			 class and nowhere else.
		 
	<bean id="triangleInnerBeanExample" class="com.edu.spring.Triangle">
		<property name="pointA" ref="pointa"></property>
		
		<property name="pointB">
			<bean class="com.edu.spring.Point">
				<property name="x" value="0"></property>
				<property name="y" value="-20"></property>
			</bean>
		</property>
		<property name="pointC" ref="pointc"></property>
	</bean>
	-->
	<!-- Here triangleParent is the abstract class which is also called incomplete class. This is a template for other classes to use 
		We can not create it's instance. i.e we can not get it's instance from appcontext.getBean() method.
	-->
	<bean id="triangleParent" class="com.edu.spring.Triangle" abstract="true">
		<property name="pointA" ref="pointa"></property>
	</bean>
	
	<!-- Here triangle is the subclass of triangleParent class. Using parent=<class_name>, we can give it's parent. -->
	<bean id="triangle" class="com.edu.spring.Triangle" parent="triangleParent" autowire="byName" scope="singleton"
				init-method="initBean" destroy-method="destroyBean">
		<property name="pointB" ref="pointb"></property>
		<property name="pointC" ref="pointc"></property>
	</bean>
	
	<bean id="pointa" class="com.edu.spring.Point">
		<property name="x" value="${pointA.pointX}"></property>
		<property name="y" value="${pointA.pointY}"></property>
	</bean>
	<bean id="pointb" class="com.edu.spring.Point">
		<property name="x" value="0"></property>
		<property name="y" value="-20"></property>
	</bean>
	<bean id="pointc" class="com.edu.spring.Point">
		<property name="x" value="20"></property>
		<property name="y" value="0"></property>
	</bean>
	
	<!-- With Alias tag we can give different name to the same bean and get it using Appcontext.getBean("triangle-alias") -->
	<alias name="triangle" alias="triangle-alias"/>
	<!-- Registering Bean Post Processor -->
	<bean class="com.edu.spring.DisplayNameBeanPostProcessor"></bean>
	<!-- Registering Bean Factory Post Processor -->
	<bean class="com.edu.spring.MyBeanFactoryPP"></bean>
	<!-- Registering Property file which can be used to inject values from some property file instead of hardcode here. -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="pointsconfig.properties"></property>
	</bean>
</beans>